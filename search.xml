<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>合适最重要</title>
    <url>/2023/05/27/%E5%90%88%E9%80%82%E6%9C%80%E9%87%8D%E8%A6%81/</url>
    <content><![CDATA[<p>不管做什么事情，选择合适的方法和道路是最重要的。还记得前几年在学习开发时候的心态，当时自己买了一台云服务器，于是想从零开始做一个个人网站，主要功能类似博客网站，具有用户管理、权限管理、内容发布等等等一些功能。当时SpringCloud正火，所以我也用了SpringCloud框架去搭建，然后从搭建到做出一个基本的雏形时我已经意识到一个问题——是不是有点杀鸡用牛刀了，我做一个个人网站有必要这样吗？而且将业务划分为颗粒度很细的微服务，感觉是在为了分而分，导致后面整个环境配置和互相协调之间都没有单体应用来的舒服，其实使用一个SpringBoot服务足以解决我的所有需求来。另外一个重要的问题是我的个人服务器配置很低，分了这么多服务，再加上MySQL等其他中间件的话配置肯定是不够。</p>
<p>后来，随着开发的越久越发现，真的是适合才是最重要的，当然，像上面那些折腾是会学到一些东西，但是更多的我感觉是浪费时间，我们应该在有限的时间用最合适的方法去解决我们的需求和问题。例如，如果我们想写博客记录内容，我们真的有必要自己重新写一个博客系统吗？当然了，除非你是要学习如何做一个博客系统，但是如果你只是想建立自己的博客网站的话完全是不需要把时间浪费在那上面，使用Hexo（我现在在使用的）或者Z-Blog等等，这些完全可以实现我们的要求，在满足一定自定义个性化设置的基础上快速的让我们聚焦到真正的需求上——写博客、记录。</p>
<p>在学习前端框架的时候我一开始也是遇到了纠结的问题，该用Rect还是Vue，由于我之前做过微信小程序的开发，并且后面接触的第一个前端框架就是Vue.js，而且Vue的语法和微信小程序的语法是类似的，因此感觉学习起来很舒服，于是后面我就一只使用Vue，最开始我也百度过Vue和Rect哪个好这样的问题，但是后面我再没有在意了，我不想再去纠结与用什么框架，还是上面的话，合适最重要，既然我熟悉微信小程序和Vue的语法，那我为什么不选择Vue呢？如果我选择Rect的话我需要重新学习它的语法和开发习惯，这个成本有必要付出吗？我想是没有必要的，Vue和Rect都是很好的框架，并且它们都可以实现我们的需求，对于我而言，只要可以完成我的要求那么它就是好的框架。</p>
<p>再举一个例子吧，如果有一台服务器配置很低，然后想高效的运行一些响应要求高的应用，那么我就会选择Vert.x去开发，因为它相对于SpringBoot启动时间快，占用内存少，而且它的理念就是异步编程，对响应要求高的应用很适合，总之，我想说技术只是我们的工具，我们要做的是选择合适的工具，而不是被工具所束缚。</p>
<p>最近看到亚马逊将它们的监控业务从云服务专为单体应用，其实这也是一种化繁为简的过程，往往我们把一些问题过度复杂化。淘宝刚开始我相信也没有立马把它们的服务建立的有多么完美，用最简单高效的方法解决最迫切的需求是最重要的。后面随着业务的发展，体量的增长，自然而然的一些东西就会完善进去，就比如我用SpringCloud搭建的个人博客网站，日活用户可能都少的可怜，这时候还需要考虑那些大规模的并发操作吗？什么熔断操作、限流和服务降级这些还有用吗？我相信是完全用不到的。</p>
<p>所以没有完美，只有合适，技术选型是如此，人生的好多事亦是如此！</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
